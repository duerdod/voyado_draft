'use strict';
function e(e) {
  return e && 'object' == typeof e && 'default' in e ? e.default : e;
}
var n = require('react'),
  i = e(n),
  t = require('xstate'),
  a = require('@xstate/react'),
  o = require('@apollo/react-hooks'),
  d = e(require('@jetshop/core/components/AuthContext/useAuth')),
  s = require('react-router'),
  r = e(require('qs'));
function l() {
  return (l =
    Object.assign ||
    function(e) {
      for (var n = 1; n < arguments.length; n++) {
        var i = arguments[n];
        for (var t in i) Object.prototype.hasOwnProperty.call(i, t) && (e[t] = i[t]);
      }
      return e;
    }).apply(this, arguments);
}
var u = {
    NoActionRequired: 'NO_ACTION_REQUIRED',
    CustomerNotFound: 'NON_EXISTING_CUSTOMER',
    CustomerAlreadyActivated: 'ALREADY_ACTIVATED',
    AdditionalUserDataRequired: 'ADDITIONAL_DATA_REQUIRED',
  },
  c = t.send(function(e) {
    return { type: u[e.status] };
  }),
  m = t.assign({
    status: function(e, n) {
      return n.data.error[0].message || 'NoActionRequired';
    },
    customer: function(e, n) {
      return n.data.activateExternalCustomerByToken
        ? l({}, n.data.activateExternalCustomerByToken.customer)
        : void 0;
    },
  }),
  k = t.assign({
    customer: function(e, n) {
      var i, t;
      return (null === (i = n.data) || void 0 === i
      ? void 0
      : null === (t = i.externalCustomerLookup) || void 0 === t
      ? void 0
      : t.customer)
        ? l({}, e.customer, {}, n.data.externalCustomerLookup.customer, {
            streetName: n.data.externalCustomerLookup.customer.address,
            mobilePhone: n.data.externalCustomerLookup.customer.mobilePhoneNumber,
          })
        : l({}, e.customer);
    },
  }),
  v = function(e) {
    return t.Machine(
      {
        id: 'ActivationMachine',
        initial: 'idle',
        context: {
          externalCustomerToken: '',
          customer: void 0,
          status: 'NoActionRequired',
          providerSettings: l({}, e),
        },
        states: {
          idle: {
            always: [
              { target: 'checking_action_required', cond: 'shouldInitialize' },
              { target: 'no_action_required' },
            ],
          },
          activated: {
            always: [
              { target: 'checking_action_required', cond: 'shouldInitialize' },
              { target: 'no_action_required' },
            ],
          },
          checking_action_required: {
            invoke: {
              id: 'tryLogin',
              src: 'tryLogin',
              onDone: 'no_action_required',
              onError: 'action_required',
            },
          },
          no_action_required: { type: 'final' },
          action_required: {
            id: 'action_required',
            initial: 'try_activate',
            states: {
              try_activate: {
                invoke: {
                  id: 'tryActivateByToken',
                  src: 'tryActivateByToken',
                  onDone: { target: '#ActivationMachine.activated' },
                  onError: {
                    target: 'activation_failed',
                    actions: ['setStatusReason', 'sendActionEvent'],
                  },
                },
              },
              activation_failed: {
                id: 'activation_failed',
                initial: 'status_response',
                states: {
                  status_response: {
                    on: {
                      NON_EXISTING_CUSTOMER: 'non_existing',
                      ALREADY_ACTIVATED: 'already_activated',
                      ADDITIONAL_DATA_REQUIRED: 'additional_data',
                      NO_ACTION_REQUIRED: 'non_existing',
                    },
                  },
                  non_existing: { type: 'final' },
                  already_activated: { type: 'final' },
                  additional_data: { type: 'final' },
                },
              },
            },
          },
        },
      },
      { actions: { setStatusReason: m, sendActionEvent: c, storeCustomer: k } }
    );
  },
  p = {
    kind: 'Document',
    definitions: [
      {
        kind: 'OperationDefinition',
        operation: 'mutation',
        name: { kind: 'Name', value: 'loginExternalCustomer' },
        variableDefinitions: [
          {
            kind: 'VariableDefinition',
            variable: { kind: 'Variable', name: { kind: 'Name', value: 'input' } },
            type: {
              kind: 'NonNullType',
              type: {
                kind: 'NamedType',
                name: { kind: 'Name', value: 'LoginExternalCustomerInput' },
              },
            },
            directives: [],
          },
        ],
        directives: [],
        selectionSet: {
          kind: 'SelectionSet',
          selections: [
            {
              kind: 'Field',
              name: { kind: 'Name', value: 'loginExternalCustomer' },
              arguments: [
                {
                  kind: 'Argument',
                  name: { kind: 'Name', value: 'input' },
                  value: { kind: 'Variable', name: { kind: 'Name', value: 'input' } },
                },
              ],
              directives: [],
              selectionSet: {
                kind: 'SelectionSet',
                selections: [
                  {
                    kind: 'Field',
                    name: { kind: 'Name', value: 'token' },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                      kind: 'SelectionSet',
                      selections: [
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'value' },
                          arguments: [],
                          directives: [],
                        },
                      ],
                    },
                  },
                ],
              },
            },
          ],
        },
      },
    ],
    loc: {
      start: 0,
      end: 147,
      source: {
        body:
          'mutation loginExternalCustomer($input: LoginExternalCustomerInput!) {\n  loginExternalCustomer(input: $input) {\n    token {\n      value\n    }\n  }\n}\n',
        name: 'GraphQL request',
        locationOffset: { line: 1, column: 1 },
      },
    },
  },
  g = {
    kind: 'Document',
    definitions: [
      {
        kind: 'OperationDefinition',
        operation: 'mutation',
        name: { kind: 'Name', value: 'ActivateExternalToken' },
        variableDefinitions: [
          {
            kind: 'VariableDefinition',
            variable: { kind: 'Variable', name: { kind: 'Name', value: 'input' } },
            type: {
              kind: 'NonNullType',
              type: {
                kind: 'NamedType',
                name: { kind: 'Name', value: 'ActivateExternalCustomerByTokenInput' },
              },
            },
            directives: [],
          },
        ],
        directives: [],
        selectionSet: {
          kind: 'SelectionSet',
          selections: [
            {
              kind: 'Field',
              name: { kind: 'Name', value: 'activateExternalCustomerByToken' },
              arguments: [
                {
                  kind: 'Argument',
                  name: { kind: 'Name', value: 'input' },
                  value: { kind: 'Variable', name: { kind: 'Name', value: 'input' } },
                },
              ],
              directives: [],
              selectionSet: {
                kind: 'SelectionSet',
                selections: [
                  {
                    kind: 'Field',
                    name: { kind: 'Name', value: 'success' },
                    arguments: [],
                    directives: [],
                  },
                  {
                    kind: 'Field',
                    name: { kind: 'Name', value: 'customer' },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                      kind: 'SelectionSet',
                      selections: [
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'externalId' },
                          arguments: [],
                          directives: [],
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'firstName' },
                          arguments: [],
                          directives: [],
                          selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'encrypted' },
                                arguments: [],
                                directives: [],
                              },
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'masked' },
                                arguments: [],
                                directives: [],
                              },
                            ],
                          },
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'email' },
                          arguments: [],
                          directives: [],
                          selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'encrypted' },
                                arguments: [],
                                directives: [],
                              },
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'masked' },
                                arguments: [],
                                directives: [],
                              },
                            ],
                          },
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'lastName' },
                          arguments: [],
                          directives: [],
                          selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'encrypted' },
                                arguments: [],
                                directives: [],
                              },
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'masked' },
                                arguments: [],
                                directives: [],
                              },
                            ],
                          },
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'address' },
                          arguments: [],
                          directives: [],
                          selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'encrypted' },
                                arguments: [],
                                directives: [],
                              },
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'masked' },
                                arguments: [],
                                directives: [],
                              },
                            ],
                          },
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'postalCode' },
                          arguments: [],
                          directives: [],
                          selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'encrypted' },
                                arguments: [],
                                directives: [],
                              },
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'masked' },
                                arguments: [],
                                directives: [],
                              },
                            ],
                          },
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'mobilePhoneNumber' },
                          arguments: [],
                          directives: [],
                          selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'encrypted' },
                                arguments: [],
                                directives: [],
                              },
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'masked' },
                                arguments: [],
                                directives: [],
                              },
                            ],
                          },
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'city' },
                          arguments: [],
                          directives: [],
                          selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'encrypted' },
                                arguments: [],
                                directives: [],
                              },
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'masked' },
                                arguments: [],
                                directives: [],
                              },
                            ],
                          },
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'co' },
                          arguments: [],
                          directives: [],
                          selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'encrypted' },
                                arguments: [],
                                directives: [],
                              },
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'masked' },
                                arguments: [],
                                directives: [],
                              },
                            ],
                          },
                        },
                      ],
                    },
                  },
                ],
              },
            },
          ],
        },
      },
    ],
    loc: {
      start: 0,
      end: 649,
      source: {
        body:
          'mutation ActivateExternalToken($input: ActivateExternalCustomerByTokenInput!) {\n  activateExternalCustomerByToken(input: $input) {\n    success\n    customer {\n      externalId\n      firstName {\n        encrypted\n        masked\n      }\n      email {\n        encrypted\n        masked\n      }\n      lastName {\n        encrypted\n        masked\n      }\n      address {\n        encrypted\n        masked\n      }\n      postalCode {\n        encrypted\n        masked\n      }\n      mobilePhoneNumber {\n        encrypted\n        masked\n      }\n      city {\n        encrypted\n        masked\n      }\n      co {\n        encrypted\n        masked\n      }\n    }\n  }\n}\n',
        name: 'GraphQL request',
        locationOffset: { line: 1, column: 1 },
      },
    },
  };
function N(e) {
  var n = o.useApolloClient(),
    i = s.useLocation().search,
    t = d(),
    u = t.loggedIn,
    c = t.logIn,
    m = r.parse(i, { ignoreQueryPrefix: !0 }).eclub,
    k = void 0 === m ? '' : m,
    N = a.useMachine(v(e), {
      context: { externalCustomerToken: encodeURIComponent(k) },
      services: {
        tryLogin: function(e) {
          return n
            .mutate({
              mutation: p,
              variables: { input: { externalCustomerToken: e.externalCustomerToken } },
            })
            .then(
              function(e) {
                var n,
                  i,
                  t,
                  a = e.data;
                return (null == a
                ? void 0
                : null === (n = a.loginExternalCustomer.token) || void 0 === n
                ? void 0
                : n.value)
                  ? Promise.resolve(
                      c(
                        null == a
                          ? void 0
                          : null === (i = a.loginExternalCustomer) || void 0 === i
                          ? void 0
                          : null === (t = i.token) || void 0 === t
                          ? void 0
                          : t.value
                      )
                    )
                  : Promise.reject();
              },
              function(e) {
                return Promise.reject(e);
              }
            );
        },
        tryActivateByToken: function(e) {
          return n
            .mutate({
              mutation: g,
              variables: { input: { externalCustomerToken: e.externalCustomerToken } },
              errorPolicy: 'all',
            })
            .then(function(e) {
              var n = e.data,
                i = e.errors;
              return i ? Promise.reject(l({ error: l({}, i) }, n)) : Promise.resolve(n);
            });
        },
      },
      guards: {
        shouldInitialize: function() {
          return k.length > 0 && !u;
        },
      },
    })[0];
  return (
    console.log('GlobalActivationState: ', JSON.stringify(N.value)),
    l(
      {},
      {
        isAdditionalDataRequired: N.matches('action_required.activation_failed.additional_data'),
        isNonExistingCustomer: N.matches('action_required.activation_failed.non_existing'),
        isActivationRequired: N.matches('action_required.activation_failed.already_activated'),
      }
    )
  );
}
var y,
  S = n.createContext({}),
  _ = t.send(function(e, n) {
    return { type: n.data.externalCustomerLookup.status, data: n.data.externalCustomerLookup };
  }),
  f = t.assign({
    customer: function(e, n) {
      return l({}, e.customer, { emailAddress: { masked: n.data.key } });
    },
  }),
  x = t.assign({
    customer: function(e, n) {
      var i, t;
      return (null === (i = n.data) || void 0 === i
      ? void 0
      : null === (t = i.externalCustomerLookup) || void 0 === t
      ? void 0
      : t.customer)
        ? l({}, e.customer, {}, n.data.externalCustomerLookup.customer, {
            streetName: n.data.externalCustomerLookup.customer.address,
            mobilePhone: n.data.externalCustomerLookup.customer.mobilePhoneNumber,
          })
        : l({}, e.customer);
    },
  }),
  F = t.assign({
    customer: function(e, n) {
      var i;
      return (null == n
      ? void 0
      : null === (i = n.data) || void 0 === i
      ? void 0
      : i.personLookup)
        ? l({}, n.data.personLookup)
        : l({}, e.customer);
    },
  }),
  E = t.assign({
    customer: function(e, n) {
      return l({}, e.customer, { token: n.data.activateExternalCustomerById.token.value });
    },
  }),
  C = t.assign({
    activationError: function() {
      return '';
    },
  }),
  A = t.Machine(
    {
      id: 'LookupMachine',
      initial: 'idle',
      context: { activationError: null, activateOnLookup: !1, customer: void 0 },
      states: {
        idle: { id: 'idle', on: { DO_LOOKUP: 'lookup' } },
        lookup: {
          entry: 'storeEmail',
          initial: 'lookup_loading',
          states: {
            lookup_loading: {
              invoke: {
                id: 'fetchLookupStatus',
                src: 'externalLookup',
                onDone: { target: 'lookup_success', actions: ['sendLookupSuccessEvent'] },
                onError: 'lookup_failed',
              },
            },
            lookup_failed: { on: { RETRY: '#idle' } },
            lookup_success: {
              initial: 'status_response',
              entry: 'storeCustomer',
              states: {
                status_response: {
                  on:
                    ((y = {}),
                    (y.ACTIVATION_REQUIRED = '#activation'),
                    (y.PREEXISTING_CUSTOMER = '#preexisting'),
                    (y.ADDITIONAL_USER_DATA_REQUIRED = '#additional_data'),
                    (y.NON_EXISTING_CUSTOMER = '#non_existing'),
                    y),
                },
                activation: {
                  id: 'activation',
                  initial: 'activation_required',
                  states: {
                    activation_required: {
                      always: {
                        target: 'activation_loading',
                        cond: function(e) {
                          return e.activateOnLookup;
                        },
                      },
                      on: { ACTIVATE_CUSTOMER: 'activation_loading' },
                    },
                    activation_loading: {
                      invoke: {
                        id: 'activate-customer-by-externalid',
                        src: 'activateExternalId',
                        onDone: { actions: 'storeToken', target: 'activation_success' },
                        onError: 'activation_failed',
                      },
                    },
                    activation_success: { type: 'final' },
                    activation_failed: { entry: 'setActivationError', on: { RETRY: '#idle' } },
                  },
                },
                preexisting: { id: 'preexisting', type: 'final' },
                additional_data: { id: 'additional_data', type: 'final' },
                non_existing: {
                  id: 'non_existing',
                  initial: 'non_existing_customer',
                  states: {
                    non_existing_customer: { always: { target: 'person_lookup_loading' } },
                    person_lookup_loading: {
                      invoke: {
                        id: 'fetch_person_lookupdata',
                        src: 'personLookup',
                        onDone: { target: 'person_lookup_success' },
                        onError: 'person_lookup_failed',
                      },
                      exit: 'storeLookupData',
                    },
                    person_lookup_success: { type: 'final' },
                    person_lookup_failed: { type: 'final' },
                  },
                },
              },
            },
          },
        },
      },
    },
    {
      actions: {
        sendLookupSuccessEvent: _,
        setActivationError: C,
        storeEmail: f,
        storeCustomer: x,
        storeToken: E,
        storeLookupData: F,
      },
    }
  ),
  b = {
    kind: 'Document',
    definitions: [
      {
        kind: 'OperationDefinition',
        operation: 'query',
        name: { kind: 'Name', value: 'ExternalLookupQuery' },
        variableDefinitions: [
          {
            kind: 'VariableDefinition',
            variable: { kind: 'Variable', name: { kind: 'Name', value: 'key' } },
            type: {
              kind: 'NonNullType',
              type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
            },
            directives: [],
          },
        ],
        directives: [],
        selectionSet: {
          kind: 'SelectionSet',
          selections: [
            {
              kind: 'Field',
              name: { kind: 'Name', value: 'externalCustomerLookup' },
              arguments: [
                {
                  kind: 'Argument',
                  name: { kind: 'Name', value: 'key' },
                  value: { kind: 'Variable', name: { kind: 'Name', value: 'key' } },
                },
              ],
              directives: [],
              selectionSet: {
                kind: 'SelectionSet',
                selections: [
                  {
                    kind: 'Field',
                    name: { kind: 'Name', value: 'status' },
                    arguments: [],
                    directives: [],
                  },
                  {
                    kind: 'Field',
                    name: { kind: 'Name', value: 'customer' },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                      kind: 'SelectionSet',
                      selections: [
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'externalId' },
                          arguments: [],
                          directives: [],
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'firstName' },
                          arguments: [],
                          directives: [],
                          selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'encrypted' },
                                arguments: [],
                                directives: [],
                              },
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'masked' },
                                arguments: [],
                                directives: [],
                              },
                            ],
                          },
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'email' },
                          arguments: [],
                          directives: [],
                          selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'encrypted' },
                                arguments: [],
                                directives: [],
                              },
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'masked' },
                                arguments: [],
                                directives: [],
                              },
                            ],
                          },
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'lastName' },
                          arguments: [],
                          directives: [],
                          selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'encrypted' },
                                arguments: [],
                                directives: [],
                              },
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'masked' },
                                arguments: [],
                                directives: [],
                              },
                            ],
                          },
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'address' },
                          arguments: [],
                          directives: [],
                          selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'encrypted' },
                                arguments: [],
                                directives: [],
                              },
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'masked' },
                                arguments: [],
                                directives: [],
                              },
                            ],
                          },
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'postalCode' },
                          arguments: [],
                          directives: [],
                          selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'encrypted' },
                                arguments: [],
                                directives: [],
                              },
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'masked' },
                                arguments: [],
                                directives: [],
                              },
                            ],
                          },
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'mobilePhoneNumber' },
                          arguments: [],
                          directives: [],
                          selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'encrypted' },
                                arguments: [],
                                directives: [],
                              },
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'masked' },
                                arguments: [],
                                directives: [],
                              },
                            ],
                          },
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'city' },
                          arguments: [],
                          directives: [],
                          selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'encrypted' },
                                arguments: [],
                                directives: [],
                              },
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'masked' },
                                arguments: [],
                                directives: [],
                              },
                            ],
                          },
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'co' },
                          arguments: [],
                          directives: [],
                          selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'encrypted' },
                                arguments: [],
                                directives: [],
                              },
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'masked' },
                                arguments: [],
                                directives: [],
                              },
                            ],
                          },
                        },
                      ],
                    },
                  },
                ],
              },
            },
          ],
        },
      },
    ],
    loc: {
      start: 0,
      end: 598,
      source: {
        body:
          'query ExternalLookupQuery($key: String!) {\n  externalCustomerLookup(key: $key) {\n    status\n    customer {\n      externalId\n      firstName {\n        encrypted\n        masked\n      }\n      email {\n        encrypted\n        masked\n      }\n      lastName {\n        encrypted\n        masked\n      }\n      address {\n        encrypted\n        masked\n      }\n      postalCode {\n        encrypted\n        masked\n      }\n      mobilePhoneNumber {\n        encrypted\n        masked\n      }\n      city {\n        encrypted\n        masked\n      }\n      co {\n        encrypted\n        masked\n      }\n    }\n  }\n}\n',
        name: 'GraphQL request',
        locationOffset: { line: 1, column: 1 },
      },
    },
  },
  h = {
    kind: 'Document',
    definitions: [
      {
        kind: 'OperationDefinition',
        operation: 'mutation',
        name: { kind: 'Name', value: 'ActivateExternalId' },
        variableDefinitions: [
          {
            kind: 'VariableDefinition',
            variable: { kind: 'Variable', name: { kind: 'Name', value: 'input' } },
            type: {
              kind: 'NonNullType',
              type: {
                kind: 'NamedType',
                name: { kind: 'Name', value: 'ActivateExternalCustomerByIdInput' },
              },
            },
            directives: [],
          },
        ],
        directives: [],
        selectionSet: {
          kind: 'SelectionSet',
          selections: [
            {
              kind: 'Field',
              name: { kind: 'Name', value: 'activateExternalCustomerById' },
              arguments: [
                {
                  kind: 'Argument',
                  name: { kind: 'Name', value: 'input' },
                  value: { kind: 'Variable', name: { kind: 'Name', value: 'input' } },
                },
              ],
              directives: [],
              selectionSet: {
                kind: 'SelectionSet',
                selections: [
                  {
                    kind: 'Field',
                    name: { kind: 'Name', value: 'success' },
                    arguments: [],
                    directives: [],
                  },
                  {
                    kind: 'Field',
                    name: { kind: 'Name', value: 'token' },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                      kind: 'SelectionSet',
                      selections: [
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'value' },
                          arguments: [],
                          directives: [],
                        },
                      ],
                    },
                  },
                ],
              },
            },
          ],
        },
      },
    ],
    loc: {
      start: 0,
      end: 170,
      source: {
        body:
          'mutation ActivateExternalId($input: ActivateExternalCustomerByIdInput!) {\n  activateExternalCustomerById(input: $input) {\n    success\n    token {\n      value\n    }\n  }\n}\n',
        name: 'GraphQL request',
        locationOffset: { line: 1, column: 1 },
      },
    },
  },
  T = {
    kind: 'Document',
    definitions: [
      {
        kind: 'OperationDefinition',
        operation: 'query',
        name: { kind: 'Name', value: 'LookupQuery' },
        variableDefinitions: [
          {
            kind: 'VariableDefinition',
            variable: { kind: 'Variable', name: { kind: 'Name', value: 'key' } },
            type: {
              kind: 'NonNullType',
              type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
            },
            directives: [],
          },
        ],
        directives: [],
        selectionSet: {
          kind: 'SelectionSet',
          selections: [
            {
              kind: 'Field',
              name: { kind: 'Name', value: 'personLookup' },
              arguments: [
                {
                  kind: 'Argument',
                  name: { kind: 'Name', value: 'key' },
                  value: { kind: 'Variable', name: { kind: 'Name', value: 'key' } },
                },
              ],
              directives: [],
              selectionSet: {
                kind: 'SelectionSet',
                selections: [
                  {
                    kind: 'Field',
                    name: { kind: 'Name', value: 'firstName' },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                      kind: 'SelectionSet',
                      selections: [
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'encrypted' },
                          arguments: [],
                          directives: [],
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'masked' },
                          arguments: [],
                          directives: [],
                        },
                      ],
                    },
                  },
                  {
                    kind: 'Field',
                    name: { kind: 'Name', value: 'lastName' },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                      kind: 'SelectionSet',
                      selections: [
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'encrypted' },
                          arguments: [],
                          directives: [],
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'masked' },
                          arguments: [],
                          directives: [],
                        },
                      ],
                    },
                  },
                  {
                    kind: 'Field',
                    name: { kind: 'Name', value: 'streetname' },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                      kind: 'SelectionSet',
                      selections: [
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'encrypted' },
                          arguments: [],
                          directives: [],
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'masked' },
                          arguments: [],
                          directives: [],
                        },
                      ],
                    },
                  },
                  {
                    kind: 'Field',
                    name: { kind: 'Name', value: 'postalCode' },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                      kind: 'SelectionSet',
                      selections: [
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'encrypted' },
                          arguments: [],
                          directives: [],
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'masked' },
                          arguments: [],
                          directives: [],
                        },
                      ],
                    },
                  },
                  {
                    kind: 'Field',
                    name: { kind: 'Name', value: 'mobilePhoneNumber' },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                      kind: 'SelectionSet',
                      selections: [
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'encrypted' },
                          arguments: [],
                          directives: [],
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'masked' },
                          arguments: [],
                          directives: [],
                        },
                      ],
                    },
                  },
                  {
                    kind: 'Field',
                    name: { kind: 'Name', value: 'city' },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                      kind: 'SelectionSet',
                      selections: [
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'encrypted' },
                          arguments: [],
                          directives: [],
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'masked' },
                          arguments: [],
                          directives: [],
                        },
                      ],
                    },
                  },
                  {
                    kind: 'Field',
                    name: { kind: 'Name', value: 'co' },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                      kind: 'SelectionSet',
                      selections: [
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'encrypted' },
                          arguments: [],
                          directives: [],
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'masked' },
                          arguments: [],
                          directives: [],
                        },
                      ],
                    },
                  },
                ],
              },
            },
          ],
        },
      },
    ],
    loc: {
      start: 0,
      end: 423,
      source: {
        body:
          'query LookupQuery($key: String!) {\n  personLookup(key: $key) {\n    firstName {\n      encrypted\n      masked\n    }\n    lastName {\n      encrypted\n      masked\n    }\n    streetname {\n      encrypted\n      masked\n    }\n    postalCode {\n      encrypted\n      masked\n    }\n    mobilePhoneNumber {\n      encrypted\n      masked\n    }\n    city {\n      encrypted\n      masked\n    }\n    co {\n      encrypted\n      masked\n    }\n  }\n}\n',
        name: 'GraphQL request',
        locationOffset: { line: 1, column: 1 },
      },
    },
  };
(exports.LookupMachine = A),
  (exports.VoyadoContext = S),
  (exports.VoyadoProvider = function(e) {
    var n = N(l({}, e.settings));
    return i.createElement(S.Provider, Object.assign({ value: n }, e));
  }),
  (exports.createActivationMachine = v),
  (exports.defaultContext = { activateOnLookup: !1 }),
  (exports.useGlobalActivation = N),
  (exports.useVoyadoLookup = function(e) {
    var n = o.useApolloClient(),
      i = a.useMachine(A, {
        services: {
          externalLookup: function(e, i) {
            return n.query({ query: b, variables: { key: i.data.key } }).then(function(e) {
              return e.data;
            });
          },
          activateExternalId: function(e) {
            return n
              .mutate({
                mutation: h,
                variables: { input: { externalCustomerId: e.customer.externalId } },
              })
              .then(function(e) {
                return e.data;
              });
          },
          personLookup: function(e) {
            return n
              .query({ query: T, variables: { key: e.customer.emailAddress } })
              .then(function(e) {
                return e.data;
              });
          },
        },
        context: l({}, e, { customer: null }),
      }),
      t = i[0],
      d = i[1],
      s = {
        isActivationRequired: t.matches('lookup.lookup_success.activation.activation_required'),
        isActivationPending: t.matches('lookup.lookup_success.activation.activation_loading'),
        isActivationSuccess: t.matches('lookup.lookup_success.activation.activation_success'),
        isPreExistingCustomer: t.matches('lookup.lookup_success.preexisting'),
        IsAdditionalDataRequired: t.matches('lookup.lookup_success.additional_data'),
        isNonExistingCustomer: t.matches('lookup.lookup_success.non_existing'),
        isPersonLookupPending: t.matches(
          'lookup.lookup_success.non_existing.person_lookup_loading'
        ),
        hasPersonLookupData: t.matches('lookup.lookup_success.non_existing.person_lookup_success'),
        error: {
          lookupError: t.matches('lookup.lookup_failed'),
          activationError: t.matches('lookup.lookup_success.activation.activation_failed'),
          errorMessage: t.context.activationError,
        },
      };
    return (
      console.log('VoyadoLookupState: ', JSON.stringify(t.value)),
      l(
        {
          lookup: function(e) {
            d({ type: 'DO_LOOKUP', data: { key: e } });
          },
          activate: function() {
            d({ type: 'ACTIVATE_CUSTOMER' });
          },
          retryLookup: function() {
            d({ type: 'RETRY' });
          },
        },
        s,
        { customer: t.context.customer }
      )
    );
  });
//# sourceMappingURL=flight-voyado.cjs.production.min.js.map
