'use strict';
function e(e) {
  return e && 'object' == typeof e && 'default' in e ? e.default : e;
}
var n = require('react'),
  i = e(n),
  t = require('xstate'),
  a = require('@xstate/react'),
  o = require('@apollo/react-hooks'),
  s = e(require('@jetshop/core/components/AuthContext/useAuth')),
  r = require('react-router'),
  d = e(require('qs'));
function l() {
  return (l =
    Object.assign ||
    function(e) {
      for (var n = 1; n < arguments.length; n++) {
        var i = arguments[n];
        for (var t in i) Object.prototype.hasOwnProperty.call(i, t) && (e[t] = i[t]);
      }
      return e;
    }).apply(this, arguments);
}
var u = { loginPath: '/login', signupPath: '/signup', loginOnActivation: !0, manualActivation: !0 };
console.log(u);
var c = {
    NoActionRequired: 'NO_ACTION_REQUIRED',
    CustomerNotFound: 'NON_EXISTING_CUSTOMER',
    CustomerAlreadyActivated: 'ALREADY_ACTIVATED',
    AdditionalUserDataRequired: 'ADDITIONAL_DATA_REQUIRED',
  },
  m = t.send(function(e) {
    return { type: c[e.status] };
  }),
  k = t.assign({
    status: function(e, n) {
      return n.data.error[0].message || 'NoActionRequired';
    },
    customer: function(e, n) {
      return n.data.activateExternalCustomerByToken
        ? l({}, n.data.activateExternalCustomerByToken.customer)
        : void 0;
    },
  }),
  v = t.assign({
    customer: function(e, n) {
      var i, t;
      return (null === (i = n.data) || void 0 === i
      ? void 0
      : null === (t = i.externalCustomerLookup) || void 0 === t
      ? void 0
      : t.customer)
        ? l({}, e.customer, {}, n.data.externalCustomerLookup.customer, {
            streetName: n.data.externalCustomerLookup.customer.address,
            mobilePhone: n.data.externalCustomerLookup.customer.mobilePhoneNumber,
          })
        : l({}, e.customer);
    },
  }),
  p = function(e) {
    return t.Machine(
      {
        id: 'ActivationMachine',
        initial: 'idle',
        context: {
          externalCustomerToken: '',
          customer: void 0,
          status: 'NoActionRequired',
          providerOptions: l({}, u, {}, e),
        },
        states: {
          idle: {
            always: [
              { target: 'checking_action_required', cond: 'shouldInitialize' },
              { target: 'no_action_required' },
            ],
          },
          activated: {
            always: [
              { target: 'checking_action_required', cond: 'shouldInitialize' },
              { target: 'no_action_required' },
            ],
          },
          checking_action_required: {
            invoke: {
              id: 'tryLogin',
              src: 'tryLogin',
              onDone: 'no_action_required',
              onError: 'action_required',
            },
          },
          no_action_required: { type: 'final' },
          action_required: {
            id: 'action_required',
            initial: 'try_activate',
            states: {
              try_activate: {
                invoke: {
                  id: 'tryActivateByToken',
                  src: 'tryActivateByToken',
                  onDone: { target: '#ActivationMachine.activated' },
                  onError: {
                    target: 'activation_failed',
                    actions: ['setStatusReason', 'sendActionEvent'],
                  },
                },
              },
              activation_failed: {
                id: 'activation_failed',
                initial: 'status_response',
                states: {
                  status_response: {
                    on: {
                      NON_EXISTING_CUSTOMER: 'non_existing',
                      ALREADY_ACTIVATED: 'already_activated',
                      ADDITIONAL_DATA_REQUIRED: 'additional_data',
                      NO_ACTION_REQUIRED: 'non_existing',
                    },
                  },
                  non_existing: { type: 'final' },
                  already_activated: { type: 'final' },
                  additional_data: { type: 'final' },
                },
              },
            },
          },
        },
      },
      { actions: { setStatusReason: k, sendActionEvent: m, storeCustomer: v } }
    );
  },
  g = {
    kind: 'Document',
    definitions: [
      {
        kind: 'OperationDefinition',
        operation: 'mutation',
        name: { kind: 'Name', value: 'ActivateExternalToken' },
        variableDefinitions: [
          {
            kind: 'VariableDefinition',
            variable: { kind: 'Variable', name: { kind: 'Name', value: 'input' } },
            type: {
              kind: 'NonNullType',
              type: {
                kind: 'NamedType',
                name: { kind: 'Name', value: 'ActivateExternalCustomerByTokenInput' },
              },
            },
            directives: [],
          },
        ],
        directives: [],
        selectionSet: {
          kind: 'SelectionSet',
          selections: [
            {
              kind: 'Field',
              name: { kind: 'Name', value: 'activateExternalCustomerByToken' },
              arguments: [
                {
                  kind: 'Argument',
                  name: { kind: 'Name', value: 'input' },
                  value: { kind: 'Variable', name: { kind: 'Name', value: 'input' } },
                },
              ],
              directives: [],
              selectionSet: {
                kind: 'SelectionSet',
                selections: [
                  {
                    kind: 'Field',
                    name: { kind: 'Name', value: 'success' },
                    arguments: [],
                    directives: [],
                  },
                  {
                    kind: 'Field',
                    name: { kind: 'Name', value: 'customer' },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                      kind: 'SelectionSet',
                      selections: [
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'externalId' },
                          arguments: [],
                          directives: [],
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'firstName' },
                          arguments: [],
                          directives: [],
                          selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'encrypted' },
                                arguments: [],
                                directives: [],
                              },
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'masked' },
                                arguments: [],
                                directives: [],
                              },
                            ],
                          },
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'email' },
                          arguments: [],
                          directives: [],
                          selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'encrypted' },
                                arguments: [],
                                directives: [],
                              },
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'masked' },
                                arguments: [],
                                directives: [],
                              },
                            ],
                          },
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'lastName' },
                          arguments: [],
                          directives: [],
                          selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'encrypted' },
                                arguments: [],
                                directives: [],
                              },
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'masked' },
                                arguments: [],
                                directives: [],
                              },
                            ],
                          },
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'address' },
                          arguments: [],
                          directives: [],
                          selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'encrypted' },
                                arguments: [],
                                directives: [],
                              },
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'masked' },
                                arguments: [],
                                directives: [],
                              },
                            ],
                          },
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'postalCode' },
                          arguments: [],
                          directives: [],
                          selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'encrypted' },
                                arguments: [],
                                directives: [],
                              },
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'masked' },
                                arguments: [],
                                directives: [],
                              },
                            ],
                          },
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'mobilePhoneNumber' },
                          arguments: [],
                          directives: [],
                          selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'encrypted' },
                                arguments: [],
                                directives: [],
                              },
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'masked' },
                                arguments: [],
                                directives: [],
                              },
                            ],
                          },
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'city' },
                          arguments: [],
                          directives: [],
                          selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'encrypted' },
                                arguments: [],
                                directives: [],
                              },
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'masked' },
                                arguments: [],
                                directives: [],
                              },
                            ],
                          },
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'co' },
                          arguments: [],
                          directives: [],
                          selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'encrypted' },
                                arguments: [],
                                directives: [],
                              },
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'masked' },
                                arguments: [],
                                directives: [],
                              },
                            ],
                          },
                        },
                      ],
                    },
                  },
                ],
              },
            },
          ],
        },
      },
    ],
    loc: {
      start: 0,
      end: 649,
      source: {
        body:
          'mutation ActivateExternalToken($input: ActivateExternalCustomerByTokenInput!) {\n  activateExternalCustomerByToken(input: $input) {\n    success\n    customer {\n      externalId\n      firstName {\n        encrypted\n        masked\n      }\n      email {\n        encrypted\n        masked\n      }\n      lastName {\n        encrypted\n        masked\n      }\n      address {\n        encrypted\n        masked\n      }\n      postalCode {\n        encrypted\n        masked\n      }\n      mobilePhoneNumber {\n        encrypted\n        masked\n      }\n      city {\n        encrypted\n        masked\n      }\n      co {\n        encrypted\n        masked\n      }\n    }\n  }\n}\n',
        name: 'GraphQL request',
        locationOffset: { line: 1, column: 1 },
      },
    },
  },
  N = {
    kind: 'Document',
    definitions: [
      {
        kind: 'OperationDefinition',
        operation: 'mutation',
        name: { kind: 'Name', value: 'ActivateExternalId' },
        variableDefinitions: [
          {
            kind: 'VariableDefinition',
            variable: { kind: 'Variable', name: { kind: 'Name', value: 'input' } },
            type: {
              kind: 'NonNullType',
              type: {
                kind: 'NamedType',
                name: { kind: 'Name', value: 'ActivateExternalCustomerByIdInput' },
              },
            },
            directives: [],
          },
        ],
        directives: [],
        selectionSet: {
          kind: 'SelectionSet',
          selections: [
            {
              kind: 'Field',
              name: { kind: 'Name', value: 'activateExternalCustomerById' },
              arguments: [
                {
                  kind: 'Argument',
                  name: { kind: 'Name', value: 'input' },
                  value: { kind: 'Variable', name: { kind: 'Name', value: 'input' } },
                },
              ],
              directives: [],
              selectionSet: {
                kind: 'SelectionSet',
                selections: [
                  {
                    kind: 'Field',
                    name: { kind: 'Name', value: 'success' },
                    arguments: [],
                    directives: [],
                  },
                  {
                    kind: 'Field',
                    name: { kind: 'Name', value: 'token' },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                      kind: 'SelectionSet',
                      selections: [
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'value' },
                          arguments: [],
                          directives: [],
                        },
                      ],
                    },
                  },
                ],
              },
            },
          ],
        },
      },
    ],
    loc: {
      start: 0,
      end: 170,
      source: {
        body:
          'mutation ActivateExternalId($input: ActivateExternalCustomerByIdInput!) {\n  activateExternalCustomerById(input: $input) {\n    success\n    token {\n      value\n    }\n  }\n}\n',
        name: 'GraphQL request',
        locationOffset: { line: 1, column: 1 },
      },
    },
  },
  y = {
    kind: 'Document',
    definitions: [
      {
        kind: 'OperationDefinition',
        operation: 'query',
        name: { kind: 'Name', value: 'ExternalLookupQuery' },
        variableDefinitions: [
          {
            kind: 'VariableDefinition',
            variable: { kind: 'Variable', name: { kind: 'Name', value: 'key' } },
            type: {
              kind: 'NonNullType',
              type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
            },
            directives: [],
          },
        ],
        directives: [],
        selectionSet: {
          kind: 'SelectionSet',
          selections: [
            {
              kind: 'Field',
              name: { kind: 'Name', value: 'externalCustomerLookup' },
              arguments: [
                {
                  kind: 'Argument',
                  name: { kind: 'Name', value: 'key' },
                  value: { kind: 'Variable', name: { kind: 'Name', value: 'key' } },
                },
              ],
              directives: [],
              selectionSet: {
                kind: 'SelectionSet',
                selections: [
                  {
                    kind: 'Field',
                    name: { kind: 'Name', value: 'status' },
                    arguments: [],
                    directives: [],
                  },
                  {
                    kind: 'Field',
                    name: { kind: 'Name', value: 'customer' },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                      kind: 'SelectionSet',
                      selections: [
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'externalId' },
                          arguments: [],
                          directives: [],
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'firstName' },
                          arguments: [],
                          directives: [],
                          selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'encrypted' },
                                arguments: [],
                                directives: [],
                              },
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'masked' },
                                arguments: [],
                                directives: [],
                              },
                            ],
                          },
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'email' },
                          arguments: [],
                          directives: [],
                          selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'encrypted' },
                                arguments: [],
                                directives: [],
                              },
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'masked' },
                                arguments: [],
                                directives: [],
                              },
                            ],
                          },
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'lastName' },
                          arguments: [],
                          directives: [],
                          selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'encrypted' },
                                arguments: [],
                                directives: [],
                              },
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'masked' },
                                arguments: [],
                                directives: [],
                              },
                            ],
                          },
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'address' },
                          arguments: [],
                          directives: [],
                          selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'encrypted' },
                                arguments: [],
                                directives: [],
                              },
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'masked' },
                                arguments: [],
                                directives: [],
                              },
                            ],
                          },
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'postalCode' },
                          arguments: [],
                          directives: [],
                          selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'encrypted' },
                                arguments: [],
                                directives: [],
                              },
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'masked' },
                                arguments: [],
                                directives: [],
                              },
                            ],
                          },
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'mobilePhoneNumber' },
                          arguments: [],
                          directives: [],
                          selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'encrypted' },
                                arguments: [],
                                directives: [],
                              },
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'masked' },
                                arguments: [],
                                directives: [],
                              },
                            ],
                          },
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'city' },
                          arguments: [],
                          directives: [],
                          selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'encrypted' },
                                arguments: [],
                                directives: [],
                              },
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'masked' },
                                arguments: [],
                                directives: [],
                              },
                            ],
                          },
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'co' },
                          arguments: [],
                          directives: [],
                          selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'encrypted' },
                                arguments: [],
                                directives: [],
                              },
                              {
                                kind: 'Field',
                                name: { kind: 'Name', value: 'masked' },
                                arguments: [],
                                directives: [],
                              },
                            ],
                          },
                        },
                      ],
                    },
                  },
                ],
              },
            },
          ],
        },
      },
    ],
    loc: {
      start: 0,
      end: 598,
      source: {
        body:
          'query ExternalLookupQuery($key: String!) {\n  externalCustomerLookup(key: $key) {\n    status\n    customer {\n      externalId\n      firstName {\n        encrypted\n        masked\n      }\n      email {\n        encrypted\n        masked\n      }\n      lastName {\n        encrypted\n        masked\n      }\n      address {\n        encrypted\n        masked\n      }\n      postalCode {\n        encrypted\n        masked\n      }\n      mobilePhoneNumber {\n        encrypted\n        masked\n      }\n      city {\n        encrypted\n        masked\n      }\n      co {\n        encrypted\n        masked\n      }\n    }\n  }\n}\n',
        name: 'GraphQL request',
        locationOffset: { line: 1, column: 1 },
      },
    },
  },
  S = {
    kind: 'Document',
    definitions: [
      {
        kind: 'OperationDefinition',
        operation: 'mutation',
        name: { kind: 'Name', value: 'loginExternalCustomer' },
        variableDefinitions: [
          {
            kind: 'VariableDefinition',
            variable: { kind: 'Variable', name: { kind: 'Name', value: 'input' } },
            type: {
              kind: 'NonNullType',
              type: {
                kind: 'NamedType',
                name: { kind: 'Name', value: 'LoginExternalCustomerInput' },
              },
            },
            directives: [],
          },
        ],
        directives: [],
        selectionSet: {
          kind: 'SelectionSet',
          selections: [
            {
              kind: 'Field',
              name: { kind: 'Name', value: 'loginExternalCustomer' },
              arguments: [
                {
                  kind: 'Argument',
                  name: { kind: 'Name', value: 'input' },
                  value: { kind: 'Variable', name: { kind: 'Name', value: 'input' } },
                },
              ],
              directives: [],
              selectionSet: {
                kind: 'SelectionSet',
                selections: [
                  {
                    kind: 'Field',
                    name: { kind: 'Name', value: 'token' },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                      kind: 'SelectionSet',
                      selections: [
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'value' },
                          arguments: [],
                          directives: [],
                        },
                      ],
                    },
                  },
                ],
              },
            },
          ],
        },
      },
    ],
    loc: {
      start: 0,
      end: 147,
      source: {
        body:
          'mutation loginExternalCustomer($input: LoginExternalCustomerInput!) {\n  loginExternalCustomer(input: $input) {\n    token {\n      value\n    }\n  }\n}\n',
        name: 'GraphQL request',
        locationOffset: { line: 1, column: 1 },
      },
    },
  },
  _ = {
    kind: 'Document',
    definitions: [
      {
        kind: 'OperationDefinition',
        operation: 'query',
        name: { kind: 'Name', value: 'LookupQuery' },
        variableDefinitions: [
          {
            kind: 'VariableDefinition',
            variable: { kind: 'Variable', name: { kind: 'Name', value: 'key' } },
            type: {
              kind: 'NonNullType',
              type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
            },
            directives: [],
          },
        ],
        directives: [],
        selectionSet: {
          kind: 'SelectionSet',
          selections: [
            {
              kind: 'Field',
              name: { kind: 'Name', value: 'personLookup' },
              arguments: [
                {
                  kind: 'Argument',
                  name: { kind: 'Name', value: 'key' },
                  value: { kind: 'Variable', name: { kind: 'Name', value: 'key' } },
                },
              ],
              directives: [],
              selectionSet: {
                kind: 'SelectionSet',
                selections: [
                  {
                    kind: 'Field',
                    name: { kind: 'Name', value: 'firstName' },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                      kind: 'SelectionSet',
                      selections: [
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'encrypted' },
                          arguments: [],
                          directives: [],
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'masked' },
                          arguments: [],
                          directives: [],
                        },
                      ],
                    },
                  },
                  {
                    kind: 'Field',
                    name: { kind: 'Name', value: 'lastName' },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                      kind: 'SelectionSet',
                      selections: [
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'encrypted' },
                          arguments: [],
                          directives: [],
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'masked' },
                          arguments: [],
                          directives: [],
                        },
                      ],
                    },
                  },
                  {
                    kind: 'Field',
                    name: { kind: 'Name', value: 'streetname' },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                      kind: 'SelectionSet',
                      selections: [
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'encrypted' },
                          arguments: [],
                          directives: [],
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'masked' },
                          arguments: [],
                          directives: [],
                        },
                      ],
                    },
                  },
                  {
                    kind: 'Field',
                    name: { kind: 'Name', value: 'postalCode' },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                      kind: 'SelectionSet',
                      selections: [
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'encrypted' },
                          arguments: [],
                          directives: [],
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'masked' },
                          arguments: [],
                          directives: [],
                        },
                      ],
                    },
                  },
                  {
                    kind: 'Field',
                    name: { kind: 'Name', value: 'mobilePhoneNumber' },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                      kind: 'SelectionSet',
                      selections: [
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'encrypted' },
                          arguments: [],
                          directives: [],
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'masked' },
                          arguments: [],
                          directives: [],
                        },
                      ],
                    },
                  },
                  {
                    kind: 'Field',
                    name: { kind: 'Name', value: 'city' },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                      kind: 'SelectionSet',
                      selections: [
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'encrypted' },
                          arguments: [],
                          directives: [],
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'masked' },
                          arguments: [],
                          directives: [],
                        },
                      ],
                    },
                  },
                  {
                    kind: 'Field',
                    name: { kind: 'Name', value: 'co' },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                      kind: 'SelectionSet',
                      selections: [
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'encrypted' },
                          arguments: [],
                          directives: [],
                        },
                        {
                          kind: 'Field',
                          name: { kind: 'Name', value: 'masked' },
                          arguments: [],
                          directives: [],
                        },
                      ],
                    },
                  },
                ],
              },
            },
          ],
        },
      },
    ],
    loc: {
      start: 0,
      end: 423,
      source: {
        body:
          'query LookupQuery($key: String!) {\n  personLookup(key: $key) {\n    firstName {\n      encrypted\n      masked\n    }\n    lastName {\n      encrypted\n      masked\n    }\n    streetname {\n      encrypted\n      masked\n    }\n    postalCode {\n      encrypted\n      masked\n    }\n    mobilePhoneNumber {\n      encrypted\n      masked\n    }\n    city {\n      encrypted\n      masked\n    }\n    co {\n      encrypted\n      masked\n    }\n  }\n}\n',
        name: 'GraphQL request',
        locationOffset: { line: 1, column: 1 },
      },
    },
  };
function f(e) {
  var i = r.useHistory(),
    t = o.useApolloClient(),
    u = r.useLocation().search,
    c = s(),
    m = c.loggedIn,
    k = c.logIn,
    v = d.parse(u, { ignoreQueryPrefix: !0 }).eclub,
    N = void 0 === v ? '' : v,
    y = a.useMachine(p(e), {
      context: { externalCustomerToken: encodeURIComponent(N) },
      services: {
        tryLogin: function(e) {
          return (function(e, n) {
            var i = n.callback;
            return n.client
              .mutate({
                mutation: S,
                variables: { input: { externalCustomerToken: e.externalCustomerToken } },
              })
              .then(
                function(e) {
                  var n,
                    t,
                    a,
                    o = e.data;
                  return (null == o
                  ? void 0
                  : null === (n = o.loginExternalCustomer.token) || void 0 === n
                  ? void 0
                  : n.value)
                    ? Promise.resolve(
                        i(
                          null == o
                            ? void 0
                            : null === (t = o.loginExternalCustomer) || void 0 === t
                            ? void 0
                            : null === (a = t.token) || void 0 === a
                            ? void 0
                            : a.value
                        )
                      )
                    : Promise.reject();
                },
                function(e) {
                  return Promise.reject(e);
                }
              );
          })(e, { client: t, callback: k });
        },
        tryActivateByToken: function(e) {
          return (function(e, n) {
            return { client: t }.client
              .mutate({
                mutation: g,
                variables: { input: { externalCustomerToken: e.externalCustomerToken } },
                errorPolicy: 'all',
              })
              .then(function(e) {
                var n = e.data,
                  i = e.errors;
                return i ? Promise.reject(l({ error: l({}, i) }, n)) : Promise.resolve(n);
              });
          })(e);
        },
      },
      guards: {
        shouldInitialize: function() {
          return N.length > 0 && !m;
        },
      },
    })[0];
  console.log('GlobalActivationState: ', JSON.stringify(y.value));
  var _ = {
    isAdditionalDataRequired: y.matches('action_required.activation_failed.additional_data'),
    isNonExistingCustomer: y.matches('action_required.activation_failed.non_existing'),
    isActivationRequired: y.matches('action_required.activation_failed.already_activated'),
    isActionPending:
      y.matches('checking_action_required') ||
      y.matches('action_required.try_activate') ||
      y.matches('action_required.activation_failed.status_response'),
  };
  return (
    n.useEffect(
      function() {
        _.isAdditionalDataRequired &&
          i.push(e.signupPath || '/signup', { customer: l({}, y.context.customer) });
      },
      [_.isAdditionalDataRequired]
    ),
    l({}, _)
  );
}
var x,
  F = n.createContext({}),
  E = { activateOnLookup: !0 },
  A = t.send(function(e, n) {
    return { type: n.data.externalCustomerLookup.status, data: n.data.externalCustomerLookup };
  }),
  C = t.assign({
    customer: function(e, n) {
      return l({}, e.customer, { emailAddress: { masked: n.data.key } });
    },
  }),
  h = t.assign({
    customer: function(e, n) {
      var i, t;
      return (null === (i = n.data) || void 0 === i
      ? void 0
      : null === (t = i.externalCustomerLookup) || void 0 === t
      ? void 0
      : t.customer)
        ? l({}, e.customer, {}, n.data.externalCustomerLookup.customer, {
            streetName: n.data.externalCustomerLookup.customer.address,
            mobilePhone: n.data.externalCustomerLookup.customer.mobilePhoneNumber,
          })
        : l({}, e.customer);
    },
  }),
  b = t.assign({
    customer: function(e, n) {
      var i;
      return (null == n
      ? void 0
      : null === (i = n.data) || void 0 === i
      ? void 0
      : i.personLookup)
        ? l({}, n.data.personLookup)
        : l({}, e.customer);
    },
  }),
  T = t.assign({
    customer: function(e, n) {
      return l({}, e.customer, { token: n.data.activateExternalCustomerById.token.value });
    },
  }),
  L = t.assign({
    activationError: function() {
      return '';
    },
  }),
  I = t.Machine(
    {
      id: 'LookupMachine',
      initial: 'idle',
      context: { activationError: null, customer: void 0, lookupOptions: {} },
      states: {
        idle: { id: 'idle', on: { DO_LOOKUP: 'lookup' } },
        lookup: {
          entry: 'storeEmail',
          initial: 'lookup_loading',
          states: {
            lookup_loading: {
              invoke: {
                id: 'fetchLookupStatus',
                src: 'externalLookup',
                onDone: { target: 'lookup_success', actions: ['sendLookupSuccessEvent'] },
                onError: 'lookup_failed',
              },
            },
            lookup_failed: { on: { RETRY: '#idle' } },
            lookup_success: {
              initial: 'status_response',
              entry: 'storeCustomer',
              states: {
                status_response: {
                  on:
                    ((x = {}),
                    (x.ACTIVATION_REQUIRED = '#activation'),
                    (x.PREEXISTING_CUSTOMER = '#preexisting'),
                    (x.ADDITIONAL_USER_DATA_REQUIRED = '#additional_data'),
                    (x.NON_EXISTING_CUSTOMER = '#non_existing'),
                    x),
                },
                activation: {
                  id: 'activation',
                  initial: 'activation_required',
                  states: {
                    activation_required: {
                      always: {
                        target: 'activation_loading',
                        cond: function(e) {
                          return e.lookupOptions.activateOnLookup;
                        },
                      },
                      on: { ACTIVATE_CUSTOMER: 'activation_loading' },
                    },
                    activation_loading: {
                      invoke: {
                        id: 'activate-customer-by-externalid',
                        src: 'activateExternalId',
                        onDone: { actions: 'storeToken', target: 'activation_success' },
                        onError: 'activation_failed',
                      },
                    },
                    activation_success: { type: 'final' },
                    activation_failed: { entry: 'setActivationError', on: { RETRY: '#idle' } },
                  },
                },
                preexisting: { id: 'preexisting', type: 'final' },
                additional_data: { id: 'additional_data', type: 'final' },
                non_existing: {
                  id: 'non_existing',
                  initial: 'non_existing_customer',
                  states: {
                    non_existing_customer: { always: { target: 'person_lookup_loading' } },
                    person_lookup_loading: {
                      invoke: {
                        id: 'fetch_person_lookupdata',
                        src: 'personLookup',
                        onDone: { target: 'person_lookup_success' },
                        onError: 'person_lookup_failed',
                      },
                      exit: 'storeLookupData',
                    },
                    person_lookup_success: { type: 'final' },
                    person_lookup_failed: { type: 'final' },
                  },
                },
              },
            },
          },
        },
      },
    },
    {
      actions: {
        sendLookupSuccessEvent: A,
        setActivationError: L,
        storeEmail: C,
        storeCustomer: h,
        storeToken: T,
        storeLookupData: b,
      },
    }
  );
(exports.LookupMachine = I),
  (exports.VoyadoContext = F),
  (exports.VoyadoProvider = function(e) {
    var n = f(l({}, e.options));
    return i.createElement(F.Provider, Object.assign({ value: n }, e));
  }),
  (exports.createActivationMachine = p),
  (exports.defaultLookupOptions = E),
  (exports.useGlobalActivation = f),
  (exports.useGlobalActivationValues = function() {
    return (
      n.useContext(F) || Error('useGlobalActivationValues cannot be used outside VoyadoProvider')
    );
  }),
  (exports.useVoyadoLookup = function(e) {
    var n = o.useApolloClient(),
      i = a.useMachine(I, {
        services: {
          externalLookup: function(e, i) {
            return (function(e, i) {
              return { client: n }.client
                .query({ query: y, variables: { key: e.data.key } })
                .then(function(e) {
                  return e.data;
                });
            })(i);
          },
          activateExternalId: function(e) {
            return (function(e, i) {
              return { client: n }.client
                .mutate({
                  mutation: N,
                  variables: { input: { externalCustomerId: e.customer.externalId } },
                })
                .then(function(e) {
                  return e.data;
                });
            })(e);
          },
          personLookup: function(e) {
            return (function(e, i) {
              return { client: n }.client
                .query({ query: _, variables: { key: e.customer.emailAddress } })
                .then(function(e) {
                  return e.data;
                });
            })(e);
          },
        },
        context: l({}, E, {}, e, { customer: null }),
      }),
      t = i[0],
      s = i[1],
      r = {
        isActivationRequired: t.matches('lookup.lookup_success.activation.activation_required'),
        isActivationPending: t.matches('lookup.lookup_success.activation.activation_loading'),
        isActivationSuccess: t.matches('lookup.lookup_success.activation.activation_success'),
        isPreExistingCustomer: t.matches('lookup.lookup_success.preexisting'),
        IsAdditionalDataRequired: t.matches('lookup.lookup_success.additional_data'),
        isNonExistingCustomer: t.matches('lookup.lookup_success.non_existing'),
        isPersonLookupPending: t.matches(
          'lookup.lookup_success.non_existing.person_lookup_loading'
        ),
        hasPersonLookupData: t.matches('lookup.lookup_success.non_existing.person_lookup_success'),
        error: {
          lookupError: t.matches('lookup.lookup_failed'),
          activationError: t.matches('lookup.lookup_success.activation.activation_failed'),
          errorMessage: t.context.activationError,
        },
      };
    return (
      console.log('VoyadoLookupState: ', JSON.stringify(t.value)),
      l(
        {
          lookup: function(e) {
            s({ type: 'DO_LOOKUP', data: { key: e } });
          },
          activate: function() {
            s({ type: 'ACTIVATE_CUSTOMER' });
          },
          retryLookup: function() {
            s({ type: 'RETRY' });
          },
        },
        r,
        { customer: t.context.customer }
      )
    );
  });
//# sourceMappingURL=flight-voyado.cjs.production.min.js.map
