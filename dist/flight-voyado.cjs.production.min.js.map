{"version":3,"file":"flight-voyado.cjs.production.min.js","sources":["../src/states/GlobalActivation.ts","../src/hooks/useGlobalActivation.ts","../src/VoyadoProvider.tsx","../src/states/ExternalLookup.ts","../src/hooks/useVoyadoLookup.ts"],"sourcesContent":["import { assign, Machine, send, DoneEventObject } from 'xstate';\n\nexport interface VoyadoProviderSettings {\n  loginPage?: string;\n  signupPage?: string;\n  loginOnActivation?: boolean;\n}\n\nexport interface VoyadoActivationContext {\n  externalCustomerToken: string;\n  customer: any;\n  status: StateEventMapperIndex;\n  providerSettings: VoyadoProviderSettings;\n}\n\ninterface ActivationSchema {\n  states: {\n    idle: {};\n    activated: {};\n    checking_action_required: {};\n    no_action_required: {};\n    action_required: {\n      states: {\n        try_activate: {};\n        activation_failed: {\n          states: {\n            status_response: {};\n            non_existing: {};\n            already_activated: {};\n            activation: {};\n            additional_data: {};\n          };\n        };\n      };\n    };\n  };\n}\n\ntype ActivationEvents =\n  | { type: 'CHECKING_ACTION_REQUIRED'; data: any }\n  | { type: 'NON_EXISTING_CUSTOMER'; data: any }\n  | { type: 'ALREADY_ACTIVATED'; data: any }\n  | { type: 'ACTIVATION_REQUIRED'; data: any }\n  | { type: 'ADDITIONAL_DATA_REQUIRED'; data: any }\n  | DoneEventObject;\n\ntype StateEventMapperIndex =\n  | 'NoActionRequired' // Dummy\n  | 'CustomerNotFound'\n  | 'CustomerAlreadyActivated'\n  | 'UnableToActivateCustomer'\n  | 'UnableToLoginCustomer'\n  | 'AdditionalUserDataRequired';\n\nconst StateEventMapper: { [key in StateEventMapperIndex]: string } = {\n  NoActionRequired: 'NO_ACTION_REQUIRED',\n  CustomerNotFound: 'NON_EXISTING_CUSTOMER',\n  CustomerAlreadyActivated: 'ALREADY_ACTIVATED',\n  AdditionalUserDataRequired: 'ADDITIONAL_DATA_REQUIRED',\n  UnableToActivateCustomer: '',\n  UnableToLoginCustomer: '',\n};\n\nconst sendActionEvent = send((context: VoyadoActivationContext) => ({\n  type: StateEventMapper[context.status],\n}));\n\nconst setStatusReason = assign<VoyadoActivationContext, ActivationEvents>({\n  status: (_, event: ActivationEvents) => {\n    const [errorType] = event.data.error;\n    return errorType.message || ('NoActionRequired' as StateEventMapperIndex);\n  },\n  customer: (_: any, event: ActivationEvents) => {\n    if (event.data.activateExternalCustomerByToken) {\n      return { ...event.data.activateExternalCustomerByToken.customer };\n    } else {\n      return undefined;\n    }\n  },\n});\n\nconst storeCustomer = assign<VoyadoActivationContext, ActivationEvents>({\n  customer: (context: VoyadoActivationContext, event: ActivationEvents) => {\n    if (event.data?.externalCustomerLookup?.customer) {\n      return {\n        ...context.customer,\n        ...event.data.externalCustomerLookup.customer,\n        // Since there is a mismatch between SignupInput type and ExternalLookup type\n        streetName: event.data.externalCustomerLookup.customer.address,\n        mobilePhone: event.data.externalCustomerLookup.customer.mobilePhoneNumber,\n      };\n    } else {\n      return {\n        ...context.customer,\n      };\n    }\n  },\n});\n\nexport const createActivationMachine = (providerSettings: VoyadoProviderSettings) =>\n  Machine<VoyadoActivationContext, ActivationSchema, ActivationEvents>(\n    {\n      id: 'ActivationMachine',\n      initial: 'idle',\n      context: {\n        externalCustomerToken: '',\n        customer: undefined,\n        status: 'NoActionRequired',\n        providerSettings: {\n          ...providerSettings,\n        },\n      },\n      states: {\n        idle: {\n          always: [\n            {\n              target: 'checking_action_required',\n              cond: 'shouldInitialize',\n            },\n            {\n              target: 'no_action_required',\n            },\n          ],\n        },\n        activated: {\n          type: 'final',\n        },\n        checking_action_required: {\n          invoke: {\n            id: 'tryLogin',\n            src: 'tryLogin',\n            onDone: 'no_action_required',\n            onError: 'action_required',\n          },\n        },\n        no_action_required: {\n          type: 'final',\n        },\n        action_required: {\n          id: 'action_required',\n          initial: 'try_activate',\n          states: {\n            try_activate: {\n              invoke: {\n                id: 'tryActivateByToken',\n                src: 'tryActivateByToken',\n                onDone: '#ActivationMachine.activated',\n                onError: {\n                  target: 'activation_failed',\n                  actions: ['setStatusReason', 'sendActionEvent'],\n                },\n              },\n            },\n            activation_failed: {\n              id: 'activation_failed',\n              initial: 'status_response',\n              states: {\n                status_response: {\n                  on: {\n                    NON_EXISTING_CUSTOMER: 'non_existing',\n                    ALREADY_ACTIVATED: 'already_activated',\n                    ACTIVATION_REQUIRED: 'activation',\n                    ADDITIONAL_DATA_REQUIRED: 'additional_data',\n                    NO_ACTION_REQUIRED: 'non_existing',\n                  },\n                },\n                non_existing: {\n                  type: 'final',\n                },\n                already_activated: {},\n                activation: {},\n                additional_data: {\n                  type: 'final',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n    {\n      actions: {\n        setStatusReason,\n        sendActionEvent,\n        storeCustomer,\n      },\n    }\n  );\n","import {\n  createActivationMachine,\n  VoyadoProviderSettings,\n  VoyadoActivationContext,\n} from '../states/GlobalActivation';\nimport { useMachine } from '@xstate/react';\n\nimport { useApolloClient } from '@apollo/react-hooks';\nimport { MutationResult } from '@apollo/react-common/lib/types/types';\nimport useAuth from '@jetshop/core/components/AuthContext/useAuth';\nimport {\n  LoginExternalCustomerResult,\n  ActivateExternalCustomerByTokenResult,\n} from '@jetshop/core/types';\nimport { useLocation } from 'react-router';\nimport qs from 'qs';\n\nimport LoginExternalCustomer from '../queries/LoginExternalCustomer.gql';\nimport ActivateExternalCustomerByToken from '../queries/ActivateExternalCustomerByToken.gql';\n\nexport function useGlobalActivation(providerSettings: VoyadoProviderSettings) {\n  const client = useApolloClient();\n  const { search } = useLocation();\n  const { loggedIn, logIn } = useAuth();\n  const { eclub = '' } = qs.parse(search, { ignoreQueryPrefix: true });\n\n  const [state] = useMachine(createActivationMachine(providerSettings), {\n    context: {\n      externalCustomerToken: encodeURIComponent(eclub as string),\n    },\n    services: {\n      tryLogin,\n      tryActivateByToken,\n    },\n    guards: {\n      shouldInitialize: () => (eclub as string).length > 0 && !loggedIn,\n    },\n  });\n\n  function tryLogin(context: VoyadoActivationContext) {\n    return client\n      .mutate({\n        mutation: LoginExternalCustomer,\n        variables: {\n          input: {\n            externalCustomerToken: context.externalCustomerToken,\n          },\n        },\n      })\n      .then(\n        ({ data }: MutationResult<{ loginExternalCustomer: LoginExternalCustomerResult }>) => {\n          if (data?.loginExternalCustomer.token?.value) {\n            return Promise.resolve(logIn(data?.loginExternalCustomer?.token?.value));\n          }\n          return Promise.reject();\n        },\n        (error: any) => {\n          return Promise.reject(error);\n        }\n      );\n  }\n\n  function tryActivateByToken(context: VoyadoActivationContext) {\n    return (\n      client\n        .mutate({\n          mutation: ActivateExternalCustomerByToken,\n          variables: {\n            input: { externalCustomerToken: context.externalCustomerToken },\n          },\n          errorPolicy: 'all',\n        })\n        // Change this when API is returning a status like we do on external lookup.\n        // If we got a status, we could just forward them as event.type.\n        .then((response: MutationResult) => {\n          const data: MutationResult<{\n            activateExternalCustomerByToken: ActivateExternalCustomerByTokenResult;\n          }> = response.data;\n          const error: any = response.error;\n\n          if (error) {\n            return Promise.reject({ error: { ...error }, ...data });\n          }\n          return Promise.resolve(data);\n        })\n    );\n  }\n\n  console.log('GlobalActivationState: ', JSON.stringify(state.value));\n  // console.log(state.context)\n\n  const states = {\n    isAdditionalDataRequired: state.matches('action_required.activation_failed.additional_data'),\n  };\n\n  return {\n    ...states,\n  };\n}\n","import React, { createContext } from 'react';\n\nimport { useGlobalActivation } from './hooks/useGlobalActivation';\nimport { VoyadoProviderSettings } from './states/GlobalActivation';\n\nexport const VoyadoContext = createContext({});\n\ninterface VoyadoProviderProps {\n  children: React.ReactNode;\n  settings: VoyadoProviderSettings;\n}\n\nexport const VoyadoProvider = (props: VoyadoProviderProps) => {\n  const activationValues = useGlobalActivation({\n    ...props.settings,\n  });\n  return <VoyadoContext.Provider value={activationValues} {...props} />;\n};\n","import { Machine, assign, send, DoneEventObject } from 'xstate';\n\nconst EVENTS = {\n  ACTIVATION_REQUIRED: 'ACTIVATION_REQUIRED',\n  PREEXISTING_CUSTOMER: 'PREEXISTING_CUSTOMER',\n  ADDITIONAL_USER_DATA_REQUIRED: 'ADDITIONAL_USER_DATA_REQUIRED',\n  NON_EXISTING_CUSTOMER: 'NON_EXISTING_CUSTOMER',\n};\n\nexport const defaultContext: Partial<LookupContext> = {\n  activateOnLookup: false,\n};\n\nexport interface LookupContext {\n  customer: any;\n  activateOnLookup: boolean;\n  activationError: null | string;\n}\n\nexport interface LookupSchema {\n  states: {\n    idle: {};\n    lookup: {\n      states: {\n        lookup_loading: {};\n        lookup_failed: {};\n        lookup_success: {\n          states: {\n            status_response: {};\n            activation: {\n              states: {\n                activation_required: {};\n                activation_loading: {};\n                activation_success: {};\n                activation_failed: {};\n              };\n            };\n            additional_data: {};\n            preexisting: {};\n            non_existing: {\n              states: {\n                non_existing_customer: {};\n                person_lookup_loading: {};\n                person_lookup_success: {};\n                person_lookup_failed: {};\n              };\n            };\n          };\n        };\n      };\n    };\n  };\n}\n\nexport type LookupEvents =\n  | { type: 'DO_LOOKUP'; data: { key?: string } }\n  | { type: 'ACTIVATION_REQUIRED'; data: any }\n  | { type: 'PREEXISTING_CUSTOMER'; data: any }\n  | { type: 'ADDITIONAL_USER_DATA_REQUIRED'; data: any }\n  | { type: 'NON_EXISTING_CUSTOMER'; data: any }\n  | { type: 'ACTIVATE_CUSTOMER'; data?: any }\n  | { type: 'RETRY'; data?: any }\n  | DoneEventObject;\n\nconst sendLookupSuccessEvent = send((_: any, event: LookupEvents) => ({\n  type: event.data.externalCustomerLookup.status,\n  data: event.data.externalCustomerLookup,\n}));\n\nconst storeEmail = assign<LookupContext, LookupEvents>({\n  customer: (context: LookupContext, event: LookupEvents) => ({\n    ...context.customer,\n    email: event.data.key,\n  }),\n});\n\nconst storeCustomer = assign<LookupContext, LookupEvents>({\n  customer: (context: LookupContext, event: LookupEvents) => {\n    console.log(event);\n    if (event.data?.externalCustomerLookup?.customer) {\n      return {\n        ...context.customer,\n        ...event.data.externalCustomerLookup.customer,\n        // Since there is a mismatch between SignupInput and ExternalLookup\n        streetName: event.data.externalCustomerLookup.customer.address,\n        mobilePhone: event.data.externalCustomerLookup.customer.mobilePhoneNumber,\n      };\n    } else {\n      return {\n        ...context.customer,\n      };\n    }\n  },\n});\n\nconst storeLookupData = assign<LookupContext, LookupEvents>({\n  customer: (_: LookupContext, event: LookupEvents) => {\n    if (event?.data?.personLookup) {\n      return { ...event.data.personLookup };\n    }\n  },\n});\n\nconst storeToken = assign<LookupContext, LookupEvents>({\n  customer: (context: LookupContext, event: LookupEvents) => ({\n    ...context.customer,\n    token: event.data.activateExternalCustomerById.token.value,\n  }),\n});\n\nconst setActivationError = assign<LookupContext, LookupEvents>({\n  activationError: () => '',\n});\n\nexport const LookupMachine = Machine<LookupContext, LookupSchema, LookupEvents>(\n  {\n    id: 'LookupMachine',\n    initial: 'idle',\n    context: {\n      activationError: null,\n      activateOnLookup: false,\n      customer: undefined,\n    },\n    states: {\n      idle: {\n        id: 'idle',\n        on: {\n          DO_LOOKUP: 'lookup',\n        },\n      },\n      lookup: {\n        entry: 'storeEmail',\n        initial: 'lookup_loading',\n        states: {\n          lookup_loading: {\n            invoke: {\n              id: 'fetchLookupStatus',\n              src: 'externalLookup',\n              onDone: {\n                target: 'lookup_success',\n                actions: ['sendLookupSuccessEvent'],\n              },\n              onError: 'lookup_failed',\n            },\n          },\n          lookup_failed: {\n            on: {\n              RETRY: '#idle',\n            },\n          },\n          lookup_success: {\n            initial: 'status_response',\n            entry: 'storeCustomer',\n            states: {\n              status_response: {\n                on: {\n                  [EVENTS.ACTIVATION_REQUIRED]: '#activation',\n                  [EVENTS.PREEXISTING_CUSTOMER]: '#preexisting',\n                  [EVENTS.ADDITIONAL_USER_DATA_REQUIRED]: '#additional_data',\n                  [EVENTS.NON_EXISTING_CUSTOMER]: '#non_existing',\n                },\n              },\n              // Account needs activation. Then can login.\n              activation: {\n                id: 'activation',\n                initial: 'activation_required',\n                states: {\n                  activation_required: {\n                    always: {\n                      target: 'activation_loading',\n                      cond: context => context.activateOnLookup,\n                    },\n                    on: {\n                      ACTIVATE_CUSTOMER: 'activation_loading',\n                    },\n                  },\n                  activation_loading: {\n                    invoke: {\n                      id: 'activate-customer-by-externalid',\n                      src: 'activateExternalId',\n                      onDone: {\n                        actions: 'storeToken',\n                        target: 'activation_success',\n                      },\n                      onError: 'activation_failed',\n                    },\n                  },\n                  activation_success: {\n                    type: 'final',\n                  },\n                  activation_failed: {\n                    entry: 'setActivationError',\n                    on: {\n                      RETRY: '#idle',\n                    },\n                  },\n                },\n              },\n              preexisting: {\n                // Can login.\n                id: 'preexisting',\n                type: 'final',\n              },\n              additional_data: {\n                // Need more data to actually create a customer.\n                id: 'additional_data',\n                type: 'final',\n              },\n              // Customer does not exist. Try fetch required information.\n              non_existing: {\n                id: 'non_existing',\n                initial: 'non_existing_customer',\n                states: {\n                  non_existing_customer: {\n                    always: {\n                      target: 'person_lookup_loading',\n                    },\n                  },\n                  person_lookup_loading: {\n                    invoke: {\n                      id: 'fetch_person_lookupdata',\n                      src: 'personLookup',\n                      onDone: {\n                        target: 'person_lookup_success',\n                      },\n                      onError: 'person_lookup_failed',\n                    },\n                    exit: 'storeLookupData',\n                  },\n                  person_lookup_success: {\n                    type: 'final',\n                  },\n                  person_lookup_failed: {\n                    type: 'final',\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      sendLookupSuccessEvent,\n      setActivationError,\n      storeEmail,\n      storeCustomer,\n      storeToken,\n      storeLookupData,\n    },\n  }\n);\n","import { useMachine } from '@xstate/react';\nimport { LookupMachine, LookupContext, LookupEvents } from '../states/ExternalLookup';\nimport { useApolloClient } from '@apollo/react-hooks';\nimport { QueryResult, MutationResult } from '@apollo/react-common';\nimport {\n  PersonLookup,\n  ExternalCustomerResult,\n  ActivateExternalCustomerByIdResult,\n} from '@jetshop/core/types';\n\nimport ExternalLookupQuery from '../queries/ExternalLookupQuery.gql';\nimport ActivateExternalId from '../queries/ActivateExternalId.gql';\nimport LookupQuery from '../queries/LookupQuery.gql';\n\nexport function useVoyadoLookup(settings: Partial<LookupContext>) {\n  const client = useApolloClient();\n  const [state, send] = useMachine(LookupMachine, {\n    services: {\n      externalLookup,\n      activateExternalId,\n      personLookup,\n    },\n    context: {\n      ...settings,\n      customer: null,\n    },\n  });\n\n  function externalLookup(_: any, event: LookupEvents) {\n    return client\n      .query({\n        query: ExternalLookupQuery,\n        variables: { key: event.data.key },\n      })\n      .then(({ data }: { data: QueryResult<{ ExternalLookupQuery: ExternalCustomerResult }> }) => {\n        return data;\n      });\n  }\n\n  function personLookup(context: LookupContext) {\n    return client\n      .query({\n        query: LookupQuery,\n        variables: { key: context.customer.email },\n      })\n      .then(({ data }: { data: QueryResult<{ LookupQuery: PersonLookup }> }) => data);\n  }\n\n  function activateExternalId(context: LookupContext) {\n    return client\n      .mutate({\n        mutation: ActivateExternalId,\n        variables: {\n          input: { externalCustomerId: context.customer.externalId },\n        },\n      })\n      .then(\n        ({\n          data,\n        }: {\n          data: MutationResult<{\n            ActivateExternalId: ActivateExternalCustomerByIdResult;\n          }>;\n        }) => data\n      );\n  }\n\n  const lookup = (key: string) => {\n    send({ type: 'DO_LOOKUP', data: { key } });\n  };\n\n  const activate = () => {\n    send({ type: 'ACTIVATE_CUSTOMER' });\n  };\n\n  const retryLookup = () => {\n    send({ type: 'RETRY' });\n  };\n\n  // Surface API responses.\n  const states = {\n    isActivationRequired: state.matches('lookup.lookup_success.activation.activation_required'),\n    isActivationPending: state.matches('lookup.lookup_success.activation.activation_loading'),\n    isActivationSuccess: state.matches('lookup.lookup_success.activation.activation_success'),\n    isPreExistingCustomer: state.matches('lookup.lookup_success.preexisting'),\n    IsAdditionalDataRequired: state.matches('lookup.lookup_success.additional_data'),\n    isNonExistingCustomer: state.matches('lookup.lookup_success.non_existing'),\n    isPersonLookupPending: state.matches(\n      'lookup.lookup_success.non_existing.person_lookup_loading'\n    ),\n    hasPersonLookupData: state.matches('lookup.lookup_success.non_existing.person_lookup_success'),\n    error: {\n      lookupError: state.matches('lookup.lookup_failed'),\n      activationError: state.matches('lookup.lookup_success.activation.activation_failed'),\n      errorMessage: state.context.activationError,\n    },\n  };\n\n  console.log('VoyadoLookupState: ', JSON.stringify(state.value));\n\n  return {\n    lookup,\n    activate,\n    retryLookup,\n    ...states,\n    customer: state.context.customer,\n  };\n}\n"],"names":["StateEventMapper","NoActionRequired","CustomerNotFound","CustomerAlreadyActivated","AdditionalUserDataRequired","UnableToActivateCustomer","UnableToLoginCustomer","sendActionEvent","send","context","type","status","setStatusReason","assign","_","event","data","error","message","customer","activateExternalCustomerByToken","storeCustomer","_event$data","externalCustomerLookup","_event$data$externalC","streetName","address","mobilePhone","mobilePhoneNumber","createActivationMachine","providerSettings","Machine","id","initial","externalCustomerToken","undefined","states","idle","always","target","cond","activated","checking_action_required","invoke","src","onDone","onError","no_action_required","action_required","try_activate","actions","activation_failed","status_response","on","NON_EXISTING_CUSTOMER","ALREADY_ACTIVATED","ACTIVATION_REQUIRED","ADDITIONAL_DATA_REQUIRED","NO_ACTION_REQUIRED","non_existing","already_activated","activation","additional_data","useGlobalActivation","client","useApolloClient","search","useLocation","useAuth","loggedIn","logIn","qs","parse","ignoreQueryPrefix","eclub","state","useMachine","encodeURIComponent","services","tryLogin","mutate","mutation","LoginExternalCustomer","variables","input","then","loginExternalCustomer","token","_data$loginExternalCu","value","Promise","resolve","_data$loginExternalCu2","_data$loginExternalCu3","reject","tryActivateByToken","ActivateExternalCustomerByToken","errorPolicy","response","guards","shouldInitialize","length","console","log","JSON","stringify","isAdditionalDataRequired","matches","VoyadoContext","createContext","sendLookupSuccessEvent","storeEmail","email","key","storeLookupData","_event$data2","personLookup","storeToken","activateExternalCustomerById","setActivationError","activationError","LookupMachine","activateOnLookup","DO_LOOKUP","lookup","entry","lookup_loading","lookup_failed","RETRY","lookup_success","activation_required","ACTIVATE_CUSTOMER","activation_loading","activation_success","preexisting","non_existing_customer","person_lookup_loading","exit","person_lookup_success","person_lookup_failed","props","activationValues","settings","React","Provider","externalLookup","query","ExternalLookupQuery","activateExternalId","ActivateExternalId","externalCustomerId","externalId","LookupQuery","isActivationRequired","isActivationPending","isActivationSuccess","isPreExistingCustomer","IsAdditionalDataRequired","isNonExistingCustomer","isPersonLookupPending","hasPersonLookupData","lookupError","errorMessage","activate","retryLookup"],"mappings":"0fAsDA,IAAMA,EAA+D,CACnEC,iBAAkB,qBAClBC,iBAAkB,wBAClBC,yBAA0B,oBAC1BC,2BAA4B,2BAC5BC,yBAA0B,GAC1BC,sBAAuB,IAGnBC,EAAkBC,OAAK,SAACC,SAAsC,CAClEC,KAAMV,EAAiBS,EAAQE,WAG3BC,EAAkBC,SAAkD,CACxEF,OAAQ,SAACG,EAAGC,UACUA,EAAMC,KAAKC,SACdC,SAAY,oBAE/BC,SAAU,SAACL,EAAQC,UACbA,EAAMC,KAAKI,qCACDL,EAAMC,KAAKI,gCAAgCD,oBAOvDE,EAAgBR,SAAkD,CACtEM,SAAU,SAACV,EAAkCM,4BACvCA,EAAMC,mCAANM,EAAYC,2CAAZC,EAAoCL,eAEjCV,EAAQU,YACRJ,EAAMC,KAAKO,uBAAuBJ,UAErCM,WAAYV,EAAMC,KAAKO,uBAAuBJ,SAASO,QACvDC,YAAaZ,EAAMC,KAAKO,uBAAuBJ,SAASS,yBAIrDnB,EAAQU,aAMNU,EAA0B,SAACC,UACtCC,UACE,CACEC,GAAI,oBACJC,QAAS,OACTxB,QAAS,CACPyB,sBAAuB,GACvBf,cAAUgB,EACVxB,OAAQ,mBACRmB,sBACKA,IAGPM,OAAQ,CACNC,KAAM,CACJC,OAAQ,CACN,CACEC,OAAQ,2BACRC,KAAM,oBAER,CACED,OAAQ,wBAIdE,UAAW,CACT/B,KAAM,SAERgC,yBAA0B,CACxBC,OAAQ,CACNX,GAAI,WACJY,IAAK,WACLC,OAAQ,qBACRC,QAAS,oBAGbC,mBAAoB,CAClBrC,KAAM,SAERsC,gBAAiB,CACfhB,GAAI,kBACJC,QAAS,eACTG,OAAQ,CACNa,aAAc,CACZN,OAAQ,CACNX,GAAI,qBACJY,IAAK,qBACLC,OAAQ,+BACRC,QAAS,CACPP,OAAQ,oBACRW,QAAS,CAAC,kBAAmB,sBAInCC,kBAAmB,CACjBnB,GAAI,oBACJC,QAAS,kBACTG,OAAQ,CACNgB,gBAAiB,CACfC,GAAI,CACFC,sBAAuB,eACvBC,kBAAmB,oBACnBC,oBAAqB,aACrBC,yBAA0B,kBAC1BC,mBAAoB,iBAGxBC,aAAc,CACZjD,KAAM,SAERkD,kBAAmB,GACnBC,WAAY,GACZC,gBAAiB,CACfpD,KAAM,eAQpB,CACEwC,QAAS,CACPtC,gBAAAA,EACAL,gBAAAA,EACAc,cAAAA,6gKCpKQ0C,EAAoBjC,OAC5BkC,EAASC,oBACPC,EAAWC,gBAAXD,SACoBE,IAApBC,IAAAA,SAAUC,IAAAA,QACKC,EAAGC,MAAMN,EAAQ,CAAEO,mBAAmB,IAArDC,MAAAA,aAAQ,KAETC,EAASC,aAAW/C,EAAwBC,GAAmB,CACpErB,QAAS,CACPyB,sBAAuB2C,mBAAmBH,IAE5CI,SAAU,CACRC,kBAQctE,UACTuD,EACJgB,OAAO,CACNC,SAAUC,EACVC,UAAW,CACTC,MAAO,CACLlD,sBAAuBzB,EAAQyB,0BAIpCmD,KACC,sBAAGrE,IAAAA,YACGA,MAAAA,mBAAAA,EAAMsE,sBAAsBC,0BAA5BC,EAAmCC,OAC9BC,QAAQC,QAAQrB,EAAMtD,MAAAA,mBAAAA,EAAMsE,oDAANM,EAA6BL,0BAA7BM,EAAoCJ,QAE5DC,QAAQI,UAEjB,SAAC7E,UACQyE,QAAQI,OAAO7E,MAzB1B8E,4BA8BwBtF,UAExBuD,EACGgB,OAAO,CACNC,SAAUe,EACVb,UAAW,CACTC,MAAO,CAAElD,sBAAuBzB,EAAQyB,wBAE1C+D,YAAa,QAIdZ,KAAK,SAACa,OACClF,EAEDkF,EAASlF,KACRC,EAAaiF,EAASjF,aAExBA,EACKyE,QAAQI,UAAS7E,WAAYA,IAAYD,IAE3C0E,QAAQC,QAAQ3E,OAjD7BmF,OAAQ,CACNC,iBAAkB,kBAAO1B,EAAiB2B,OAAS,IAAMhC,gBAqD7DiC,QAAQC,IAAI,0BAA2BC,KAAKC,UAAU9B,EAAMc,aAG7C,CACbiB,yBAA0B/B,EAAMgC,QAAQ,6DCvF/BC,EAAgBC,gBAAc,IC2DrCC,EAAyBtG,OAAK,SAACM,EAAQC,SAAyB,CACpEL,KAAMK,EAAMC,KAAKO,uBAAuBZ,OACxCK,KAAMD,EAAMC,KAAKO,0BAGbwF,EAAalG,SAAoC,CACrDM,SAAU,SAACV,EAAwBM,eAC9BN,EAAQU,UACX6F,MAAOjG,EAAMC,KAAKiG,SAIhB5F,EAAgBR,SAAoC,CACxDM,SAAU,SAACV,EAAwBM,kBACjCuF,QAAQC,IAAIxF,cACRA,EAAMC,mCAANM,EAAYC,2CAAZC,EAAoCL,eAEjCV,EAAQU,YACRJ,EAAMC,KAAKO,uBAAuBJ,UAErCM,WAAYV,EAAMC,KAAKO,uBAAuBJ,SAASO,QACvDC,YAAaZ,EAAMC,KAAKO,uBAAuBJ,SAASS,yBAIrDnB,EAAQU,aAMb+F,EAAkBrG,SAAoC,CAC1DM,SAAU,SAACL,EAAkBC,YACvBA,MAAAA,mBAAAA,EAAOC,yBAAPmG,EAAaC,yBACHrG,EAAMC,KAAKoG,iBAKvBC,EAAaxG,SAAoC,CACrDM,SAAU,SAACV,EAAwBM,eAC9BN,EAAQU,UACXoE,MAAOxE,EAAMC,KAAKsG,6BAA6B/B,MAAME,WAInD8B,EAAqB1G,SAAoC,CAC7D2G,gBAAiB,iBAAM,MAGZC,EAAgB1F,UAC3B,CACEC,GAAI,gBACJC,QAAS,OACTxB,QAAS,CACP+G,gBAAiB,KACjBE,kBAAkB,EAClBvG,cAAUgB,GAEZC,OAAQ,CACNC,KAAM,CACJL,GAAI,OACJqB,GAAI,CACFsE,UAAW,WAGfC,OAAQ,CACNC,MAAO,aACP5F,QAAS,iBACTG,OAAQ,CACN0F,eAAgB,CACdnF,OAAQ,CACNX,GAAI,oBACJY,IAAK,iBACLC,OAAQ,CACNN,OAAQ,iBACRW,QAAS,CAAC,2BAEZJ,QAAS,kBAGbiF,cAAe,CACb1E,GAAI,CACF2E,MAAO,UAGXC,eAAgB,CACdhG,QAAS,kBACT4F,MAAO,gBACPzF,OAAQ,CACNgB,gBAAiB,CACfC,WAAE,oBAC8B,gBAD9B,qBAE+B,iBAF/B,8BAGwC,qBAHxC,sBAIgC,oBAIpCQ,WAAY,CACV7B,GAAI,aACJC,QAAS,sBACTG,OAAQ,CACN8F,oBAAqB,CACnB5F,OAAQ,CACNC,OAAQ,qBACRC,KAAM,SAAA/B,UAAWA,EAAQiH,mBAE3BrE,GAAI,CACF8E,kBAAmB,uBAGvBC,mBAAoB,CAClBzF,OAAQ,CACNX,GAAI,kCACJY,IAAK,qBACLC,OAAQ,CACNK,QAAS,aACTX,OAAQ,sBAEVO,QAAS,sBAGbuF,mBAAoB,CAClB3H,KAAM,SAERyC,kBAAmB,CACjB0E,MAAO,qBACPxE,GAAI,CACF2E,MAAO,YAKfM,YAAa,CAEXtG,GAAI,cACJtB,KAAM,SAERoD,gBAAiB,CAEf9B,GAAI,kBACJtB,KAAM,SAGRiD,aAAc,CACZ3B,GAAI,eACJC,QAAS,wBACTG,OAAQ,CACNmG,sBAAuB,CACrBjG,OAAQ,CACNC,OAAQ,0BAGZiG,sBAAuB,CACrB7F,OAAQ,CACNX,GAAI,0BACJY,IAAK,eACLC,OAAQ,CACNN,OAAQ,yBAEVO,QAAS,wBAEX2F,KAAM,mBAERC,sBAAuB,CACrBhI,KAAM,SAERiI,qBAAsB,CACpBjI,KAAM,iBAUxB,CACEwC,QAAS,CACP4D,uBAAAA,EACAS,mBAAAA,EACAR,WAAAA,EACA1F,cAAAA,EACAgG,WAAAA,EACAH,gBAAAA,0pQD9OwB,SAAC0B,OACvBC,EAAmB9E,OACpB6E,EAAME,kBAEJC,gBAACnC,EAAcoC,wBAASvD,MAAOoD,GAAsBD,8DCPR,CACpDlB,kBAAkB,kECIYoB,OACxB9E,EAASC,sBACOW,aAAW6C,EAAe,CAC9C3C,SAAU,CACRmE,wBAUoBnI,EAAQC,UACvBiD,EACJkF,MAAM,CACLA,MAAOC,EACPhE,UAAW,CAAE8B,IAAKlG,EAAMC,KAAKiG,OAE9B5B,KAAK,qBAAGrE,QAfToI,4BA6BwB3I,UACnBuD,EACJgB,OAAO,CACNC,SAAUoE,EACVlE,UAAW,CACTC,MAAO,CAAEkE,mBAAoB7I,EAAQU,SAASoI,eAGjDlE,KACC,qBACErE,QAtCJoG,sBAmBkB3G,UACbuD,EACJkF,MAAM,CACLA,MAAOM,EACPrE,UAAW,CAAE8B,IAAKxG,EAAQU,SAAS6F,SAEpC3B,KAAK,qBAAGrE,SAvBXP,aACKqI,GACH3H,SAAU,SARPwD,OAAOnE,OAgER4B,EAAS,CACbqH,qBAAsB9E,EAAMgC,QAAQ,wDACpC+C,oBAAqB/E,EAAMgC,QAAQ,uDACnCgD,oBAAqBhF,EAAMgC,QAAQ,uDACnCiD,sBAAuBjF,EAAMgC,QAAQ,qCACrCkD,yBAA0BlF,EAAMgC,QAAQ,yCACxCmD,sBAAuBnF,EAAMgC,QAAQ,sCACrCoD,sBAAuBpF,EAAMgC,QAC3B,4DAEFqD,oBAAqBrF,EAAMgC,QAAQ,4DACnC1F,MAAO,CACLgJ,YAAatF,EAAMgC,QAAQ,wBAC3Ba,gBAAiB7C,EAAMgC,QAAQ,sDAC/BuD,aAAcvF,EAAMlE,QAAQ+G,yBAIhClB,QAAQC,IAAI,sBAAuBC,KAAKC,UAAU9B,EAAMc,WAGtDmC,OAlCa,SAACX,GACdzG,EAAK,CAAEE,KAAM,YAAaM,KAAM,CAAEiG,IAAAA,MAkClCkD,SA/Be,WACf3J,EAAK,CAAEE,KAAM,uBA+Bb0J,YA5BkB,WAClB5J,EAAK,CAAEE,KAAM,YA4BV0B,GACHjB,SAAUwD,EAAMlE,QAAQU"}